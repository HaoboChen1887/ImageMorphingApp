import time
import numpy as np
from scipy import spatial, interpolate
import imageio as imio
from PIL import Image, ImageDraw, ImageColor

class Affine:
    def __init__(self, source, destination):
        if not isinstance(source, np.ndarray) or not isinstance(destination, np.ndarray):
            raise TypeError("One or more arguement is not np.ndarray")
        elif len(source) != 3 or len(source[0]) != 2:
            raise ValueError("Dimension of 'source' is not valid")
        elif len(destination) != 3 or len(destination[0]) != 2:
            raise ValueError("Dimension of 'destination' is not valid")
        elif all(not isinstance(pix, np.float64) for row in source for pix in row):
            raise ValueError("One or more value in 'source' is not np.float64")
        elif all(not isinstance(pix, np.float64) for row in destination for pix in row):
            raise ValueError("One or more value in 'destination' is not np.float64")

        self.source = source
        self.destination = destination
        self.matrix = self.getMat()

    def getMat(self):
        mat_l = np.vstack(([self.destination[0][0], self.destination[0][1], 1, 0, 0, 0],
                           [0, 0, 0, self.destination[0][0], self.destination[0][1], 1]))
        for idx in range(1, 3):
            mat_l = np.vstack((mat_l, [self.destination[idx][0], self.destination[idx][1], 1, 0, 0, 0]))
            mat_l = np.vstack((mat_l, [0, 0, 0, self.destination[idx][0], self.destination[idx][1], 1]))
        mat_r = np.vstack((self.source[0][0],
                           self.source[0][1],
                           self.source[1][0],
                           self.source[1][1],
                           self.source[2][0],
                           self.source[2][1]))
        result = np.linalg.solve(mat_l, mat_r)
        matrix = np.vstack((result.reshape((2, 3)), np.array([0, 0, 1], np.float64)))
        # mat_l = np.vstack(([self.source[0][0], self.source[0][1], 1, 0, 0, 0],
        #                    [0, 0, 0, self.source[0][0], self.source[0][1], 1]))
        # for idx in range(1, 3):
        #     mat_l = np.vstack((mat_l, [self.source[idx][0], self.source[idx][1], 1, 0, 0, 0]))
        #     mat_l = np.vstack((mat_l, [0, 0, 0, self.source[idx][0], self.source[idx][1], 1]))
        # mat_r = np.vstack((self.destination[0][0],
        #                    self.destination[0][1],
        #                    self.destination[1][0],
        #                    self.destination[1][1],
        #                    self.destination[2][0],
        #                    self.destination[2][1]))
        # result = np.linalg.solve(mat_l, mat_r)
        # matrix = np.linalg.inv(np.vstack((result.reshape((2, 3)), np.array([0, 0, 1], np.float64))))
        return matrix

    def transform(self, sourceImage, destinationImage):
        if not isinstance(sourceImage, np.ndarray) or not isinstance(destinationImage, np.ndarray):
            raise TypeError("One or more arguement is not np.ndarray")
        else:
            height, width = sourceImage.shape
            img = Image.new('L', (width, height), 0)
            ImageDraw.Draw(img).polygon([self.destination[0, 0], self.destination[0, 1],
                                         self.destination[1, 0], self.destination[1, 1],
                                         self.destination[2, 0], self.destination[2, 1]], outline=255, fill=255)
            # ImageDraw.Draw(img).polygon(self.destination, outline=255, fill=255)
            mask = np.array(img)
            y, x = np.nonzero(mask)
            inter = interpolate.RectBivariateSpline(range(height), range(width), sourceImage, kx=1, ky=1)

            for idx in range(len(y)):
                det_p = [x[idx], y[idx], 1]
                src_p = np.dot(self.matrix, det_p)
                destinationImage[det_p[1], det_p[0]] = np.round(inter.ev(src_p[1], src_p[0]))
        pass

class Blender:
    def __init__(self, startImage, startPoints, endImage, endPoints):
        for array in [startImage, startPoints, endImage, endPoints]:
            if not isinstance(array, np.ndarray):
                print(type(array))
                raise TypeError('One or more argument is not np.ndarray')

        self.startImage = startImage
        self.startPoints = startPoints
        self.endImage = endImage
        self.endPoints = endPoints

    def getBlendedImage(self, alpha):
        # targetPoints = self.startPoints * alpha + self.endPoints * (1 - alpha)
        targetImage1 = np.zeros(self.startImage.shape, np.uint8)
        targetImage2 = np.zeros(self.startImage.shape, np.uint8)
        # TODO: originally delaunay is performed on targetpoints
        tri_ob = spatial.Delaunay(self.startPoints)
        targetPoints = self.getTargetPoints(tri_ob.simplices, alpha)
        aff_l = self.getAffine(tri_ob.simplices, self.startPoints, targetPoints)
        for tri in aff_l:
            tri.transform(self.startImage, targetImage1)
            # TODO:delete
            break
        aff_l = self.getAffine(tri_ob.simplices, self.endPoints, targetPoints)
        # TODO:delete
        return
        for tri in aff_l:
            tri.transform(self.endImage, targetImage2)
        finalImage = targetImage1 * alpha + targetImage2 * (1 - alpha)
        imio.imwrite('test.png', finalImage)

    def getTargetPoints(self, vertices, alpha):
        for tri in vertices:
            src_x1, src_y1 = self.startPoints[tri[0]]
            src_x2, src_y2 = self.startPoints[tri[1]]
            src_x3, src_y3 = self.startPoints[tri[2]]
            end_x1, end_y1 = self.endPoints[tri[0]]
            end_x2, end_y2 = self.endPoints[tri[1]]
            end_x3, end_y3 = self.endPoints[tri[2]]
            tar_x1 = 0.5 * src_x1 + 0.5 * end_x1
            tar_x2 = 0.5 * src_x2 + 0.5 * end_x2
            tar_x3 = 0.5 * src_x3 + 0.5 * end_x3
            tar_y1 = 0.5 * src_y1 + 0.5 * end_y1
            tar_y2 = 0.5 * src_y3 + 0.5 * end_y2
            tar_y3 = 0.5 * src_y2 + 0.5 * end_y3
            print('[', tar_x1, tar_y1, '\n', tar_x2, tar_y2, '\n', tar_x3, tar_y3, ']')
            print(self.startPoints[tri] * 0.5 + self.endPoints[tri] * 0.5)
        return

    def getAffine(self, vertices, srcPoints, targetPoints):
        aff_l = []
        for tri in vertices:
            aff_l.append(Affine(srcPoints[tri], targetPoints[tri]))
        return aff_l

class ColorAffine:
    def __init__(self, source, destination):
        if not isinstance(source, np.ndarray) or not isinstance(destination, np.ndarray):
            raise TypeError("One or more arguement is not np.ndarray")
        elif len(source) != 3 or len(source[0]) != 2:
            raise ValueError("Dimension of 'source' is not valid")
        elif len(destination) != 3 or len(destination[0]) != 2:
            raise ValueError("Dimension of 'destination' is not valid")
        elif all(not isinstance(pix, np.float64) for row in source for pix in row):
            raise ValueError("One or more value in 'source' is not np.float64")
        elif all(not isinstance(pix, np.float64) for row in destination for pix in row):
            raise ValueError("One or more value in 'destination' is not np.float64")

        self.source = source
        self.destination = destination
        self.matrix = self.getMat()

    def getMat(self):
        mat_l = np.vstack(([self.destination[0][0], self.destination[0][1], 1, 0, 0, 0],
                           [0, 0, 0, self.destination[0][0], self.destination[0][1], 1]))
        for idx in range(1, 3):
            mat_l = np.vstack((mat_l, [self.destination[idx][0], self.destination[idx][1], 1, 0, 0, 0]))
            mat_l = np.vstack((mat_l, [0, 0, 0, self.destination[idx][0], self.destination[idx][1], 1]))
        mat_r = np.vstack((self.source[0][0],
                           self.source[0][1],
                           self.source[1][0],
                           self.source[1][1],
                           self.source[2][0],
                           self.source[2][1]))
        result = np.linalg.solve(mat_l, mat_r)
        matrix = np.vstack((result.reshape((2, 3)), np.array([0, 0, 1], np.float64)))
        return matrix

    def transform(self, sourceImage, destinationImage):
        if not isinstance(sourceImage, np.ndarray) or not isinstance(destinationImage, np.ndarray):
            raise TypeError("One or more arguement is not np.ndarray")
        else:
            height, width, rgb = sourceImage.shape
            img = Image.new('L', (width, height), 0)
            ImageDraw.Draw(img).polygon([self.destination[0, 0], self.destination[0, 1],
                                         self.destination[1, 0], self.destination[1, 1],
                                         self.destination[2, 0], self.destination[2, 1]], outline=255, fill=255)
            mask = np.array(img)
            y, x = np.nonzero(mask)
            inter_r = interpolate.RectBivariateSpline(range(height), range(width), sourceImage[:, :, 0], kx=1, ky=1)
            inter_g = interpolate.RectBivariateSpline(range(height), range(width), sourceImage[:, :, 1], kx=1, ky=1)
            inter_b = interpolate.RectBivariateSpline(range(height), range(width), sourceImage[:, :, 2], kx=1, ky=1)

            for idx in range(len(y)):
                det_p = [x[idx], y[idx], 1]
                src_p = np.dot(self.matrix, det_p)
                destinationImage[det_p[1], det_p[0], 0] = np.round(inter_r.ev(src_p[1], src_p[0]))
                destinationImage[det_p[1], det_p[0], 1] = np.round(inter_g.ev(src_p[1], src_p[0]))
                destinationImage[det_p[1], det_p[0], 2] = np.round(inter_b.ev(src_p[1], src_p[0]))
        pass

class ColorBlender:
    def __init__(self, startImage, startPoints, endImage, endPoints):
        for array in [startImage, startPoints, endImage, endPoints]:
            if not isinstance(array, np.ndarray):
                print(type(array))
                raise TypeError('One or more argument is not np.ndarray')

        self.startImage = startImage
        self.startPoints = startPoints
        self.endImage = endImage
        self.endPoints = endPoints

    def getBlendedImage(self, alpha):
        targetPoints = self.startPoints * alpha + self.endPoints * (1 - alpha)
        targetImage1 = np.zeros(self.startImage.shape, np.uint8)
        targetImage2 = np.zeros(self.startImage.shape, np.uint8)
        tri_ob = spatial.Delaunay(targetPoints)
        aff_l = self.getAffine(tri_ob.simplices, self.startPoints, targetPoints)
        for tri in aff_l:
            tri.transform(self.startImage, targetImage1)
        aff_l = self.getAffine(tri_ob.simplices, self.endPoints, targetPoints)
        for tri in aff_l:
            tri.transform(self.endImage, targetImage2)
        finalImage = targetImage1 * alpha + targetImage2 * (1 - alpha)
        imio.imwrite('test_color.png', finalImage)

    def getAffine(self, vertices, srcPoints, targetPoints):
        aff_l = []
        for tri in vertices:
            aff_l.append(ColorAffine(srcPoints[tri], targetPoints[tri]))
        return aff_l

def testbench():
    expected = imio.imread('gray_results/frame021.png')
    actual = imio.imread('test.png')
    diff = np.absolute(actual - expected)
    img = np.array(Image.new('L', (800, 600), 0))
    for x in range(800):
        for y in range(600):
            if diff[y, x] > 4:
                img[y, x] = 255
    imio.imwrite('diff.png', img)

if __name__ == '__main__':
    start_time = time.time()
    # endPoints = np.loadtxt('wolf.jpg.txt', np.float64)
    # startPoints = np.loadtxt('tiger2.jpg.txt', np.float64)
    # endImage = imio.imread('WolfGray.jpg')
    # startImage = imio.imread('Tiger2Gray.jpg')

    startPoints = np.loadtxt('wolf.jpg.txt', np.float64)
    endPoints = np.loadtxt('tiger2.jpg.txt', np.float64)
    startImage = imio.imread('WolfGray.jpg')
    endImage = imio.imread('Tiger2Gray.jpg')
    blender = Blender(startImage, startPoints, endImage, endPoints)
    blender.getBlendedImage(0.5)
    print("--- %s seconds ---" % (time.time() - start_time))
    testbench()

    # startColor = imio.imread('WolfColor.jpg')
    # endColor = imio.imread('Tiger2Color.jpg')
    # color_blender = ColorBlender(startColor, startPoints, endColor, endPoints)
    # color_blender.getBlendedImage(0.5)
    # print(startColor.shape)

    # print("--- %s seconds ---" % (time.time() - start_time))
    pass

